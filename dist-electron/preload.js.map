{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["console.log(\"Preload script starting...\")\nimport { contextBridge, ipcRenderer } from \"electron\"\nconst { shell } = require(\"electron\")\n\nexport const PROCESSING_EVENTS = {\n  //global states\n  UNAUTHORIZED: \"procesing-unauthorized\",\n  NO_SCREENSHOTS: \"processing-no-screenshots\",\n  OUT_OF_CREDITS: \"out-of-credits\",\n  API_KEY_INVALID: \"api-key-invalid\",\n\n  //states for generating the initial solution\n  INITIAL_START: \"initial-start\",\n  PROBLEM_EXTRACTED: \"problem-extracted\",\n  SOLUTION_SUCCESS: \"solution-success\",\n  INITIAL_SOLUTION_ERROR: \"solution-error\",\n  RESET: \"reset\",\n\n  //states for processing the debugging\n  DEBUG_START: \"debug-start\",\n  DEBUG_SUCCESS: \"debug-success\",\n  DEBUG_ERROR: \"debug-error\"\n} as const\n\n// At the top of the file\nconsole.log(\"Preload script is running\")\n\nconst electronAPI = {\n  // Original methods\n  openSubscriptionPortal: async (authData: { id: string; email: string }) => {\n    return ipcRenderer.invoke(\"open-subscription-portal\", authData)\n  },\n  openSettingsPortal: () => ipcRenderer.invoke(\"open-settings-portal\"),\n  updateContentDimensions: (dimensions: { width: number; height: number }) =>\n    ipcRenderer.invoke(\"update-content-dimensions\", dimensions),\n  clearStore: () => ipcRenderer.invoke(\"clear-store\"),\n  getScreenshots: () => ipcRenderer.invoke(\"get-screenshots\"),\n  deleteScreenshot: (path: string) =>\n    ipcRenderer.invoke(\"delete-screenshot\", path),\n  toggleMainWindow: async () => {\n    console.log(\"toggleMainWindow called from preload\")\n    try {\n      const result = await ipcRenderer.invoke(\"toggle-window\")\n      console.log(\"toggle-window result:\", result)\n      return result\n    } catch (error) {\n      console.error(\"Error in toggleMainWindow:\", error)\n      throw error\n    }\n  },\n  // Event listeners\n  onScreenshotTaken: (\n    callback: (data: { path: string; preview: string }) => void\n  ) => {\n    const subscription = (_: any, data: { path: string; preview: string }) =>\n      callback(data)\n    ipcRenderer.on(\"screenshot-taken\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"screenshot-taken\", subscription)\n    }\n  },\n  onResetView: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(\"reset-view\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"reset-view\", subscription)\n    }\n  },\n  onSolutionStart: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.INITIAL_START, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.INITIAL_START, subscription)\n    }\n  },\n  onDebugStart: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.DEBUG_START, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.DEBUG_START, subscription)\n    }\n  },\n  onDebugSuccess: (callback: (data: any) => void) => {\n    ipcRenderer.on(\"debug-success\", (_event, data) => callback(data))\n    return () => {\n      ipcRenderer.removeListener(\"debug-success\", (_event, data) =>\n        callback(data)\n      )\n    }\n  },\n  onDebugError: (callback: (error: string) => void) => {\n    const subscription = (_: any, error: string) => callback(error)\n    ipcRenderer.on(PROCESSING_EVENTS.DEBUG_ERROR, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.DEBUG_ERROR, subscription)\n    }\n  },\n  onSolutionError: (callback: (error: string) => void) => {\n    const subscription = (_: any, error: string) => callback(error)\n    ipcRenderer.on(PROCESSING_EVENTS.INITIAL_SOLUTION_ERROR, subscription)\n    return () => {\n      ipcRenderer.removeListener(\n        PROCESSING_EVENTS.INITIAL_SOLUTION_ERROR,\n        subscription\n      )\n    }\n  },\n  onProcessingNoScreenshots: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.NO_SCREENSHOTS, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.NO_SCREENSHOTS, subscription)\n    }\n  },\n  onOutOfCredits: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.OUT_OF_CREDITS, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.OUT_OF_CREDITS, subscription)\n    }\n  },\n  onProblemExtracted: (callback: (data: any) => void) => {\n    const subscription = (_: any, data: any) => callback(data)\n    ipcRenderer.on(PROCESSING_EVENTS.PROBLEM_EXTRACTED, subscription)\n    return () => {\n      ipcRenderer.removeListener(\n        PROCESSING_EVENTS.PROBLEM_EXTRACTED,\n        subscription\n      )\n    }\n  },\n  onSolutionSuccess: (callback: (data: any) => void) => {\n    const subscription = (_: any, data: any) => callback(data)\n    ipcRenderer.on(PROCESSING_EVENTS.SOLUTION_SUCCESS, subscription)\n    return () => {\n      ipcRenderer.removeListener(\n        PROCESSING_EVENTS.SOLUTION_SUCCESS,\n        subscription\n      )\n    }\n  },\n  onUnauthorized: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.UNAUTHORIZED, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.UNAUTHORIZED, subscription)\n    }\n  },\n  // External URL handler\n  openLink: (url: string) => shell.openExternal(url),\n  triggerScreenshot: () => ipcRenderer.invoke(\"trigger-screenshot\"),\n  triggerProcessScreenshots: () =>\n    ipcRenderer.invoke(\"trigger-process-screenshots\"),\n  triggerReset: () => ipcRenderer.invoke(\"trigger-reset\"),\n  triggerMoveLeft: () => ipcRenderer.invoke(\"trigger-move-left\"),\n  triggerMoveRight: () => ipcRenderer.invoke(\"trigger-move-right\"),\n  triggerMoveUp: () => ipcRenderer.invoke(\"trigger-move-up\"),\n  triggerMoveDown: () => ipcRenderer.invoke(\"trigger-move-down\"),\n  onSubscriptionUpdated: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(\"subscription-updated\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"subscription-updated\", subscription)\n    }\n  },\n  onSubscriptionPortalClosed: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(\"subscription-portal-closed\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"subscription-portal-closed\", subscription)\n    }\n  },\n  onReset: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.RESET, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.RESET, subscription)\n    }\n  },\n  startUpdate: () => ipcRenderer.invoke(\"start-update\"),\n  installUpdate: () => ipcRenderer.invoke(\"install-update\"),\n  onUpdateAvailable: (callback: (info: any) => void) => {\n    const subscription = (_: any, info: any) => callback(info)\n    ipcRenderer.on(\"update-available\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"update-available\", subscription)\n    }\n  },\n  onUpdateDownloaded: (callback: (info: any) => void) => {\n    const subscription = (_: any, info: any) => callback(info)\n    ipcRenderer.on(\"update-downloaded\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"update-downloaded\", subscription)\n    }\n  },\n  decrementCredits: () => ipcRenderer.invoke(\"decrement-credits\"),\n  onCreditsUpdated: (callback: (credits: number) => void) => {\n    const subscription = (_event: any, credits: number) => callback(credits)\n    ipcRenderer.on(\"credits-updated\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"credits-updated\", subscription)\n    }\n  },\n  getPlatform: () => process.platform,\n  \n  // New methods for OpenAI API integration\n  getConfig: () => ipcRenderer.invoke(\"get-config\"),\n  updateConfig: (config: { apiKey?: string; model?: string; language?: string; opacity?: number }) => \n    ipcRenderer.invoke(\"update-config\", config),\n  onShowSettings: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(\"show-settings-dialog\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"show-settings-dialog\", subscription)\n    }\n  },\n  checkApiKey: () => ipcRenderer.invoke(\"check-api-key\"),\n  validateApiKey: (apiKey: string) => \n    ipcRenderer.invoke(\"validate-api-key\", apiKey),\n  openExternal: (url: string) => \n    ipcRenderer.invoke(\"openExternal\", url),\n  onApiKeyInvalid: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.API_KEY_INVALID, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.API_KEY_INVALID, subscription)\n    }\n  },\n  removeListener: (eventName: string, callback: (...args: any[]) => void) => {\n    ipcRenderer.removeListener(eventName, callback)\n  },\n  onDeleteLastScreenshot: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(\"delete-last-screenshot\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"delete-last-screenshot\", subscription)\n    }\n  },\n  deleteLastScreenshot: () => ipcRenderer.invoke(\"delete-last-screenshot\")\n}\n\n// Before exposing the API\nconsole.log(\n  \"About to expose electronAPI with methods:\",\n  Object.keys(electronAPI)\n)\n\n// Expose the API\ncontextBridge.exposeInMainWorld(\"electronAPI\", electronAPI)\n\nconsole.log(\"electronAPI exposed to window\")\n\n// Add this focus restoration handler\nipcRenderer.on(\"restore-focus\", () => {\n  // Try to focus the active element if it exists\n  const activeElement = document.activeElement as HTMLElement\n  if (activeElement && typeof activeElement.focus === \"function\") {\n    activeElement.focus()\n  }\n})\n\n// Remove auth-callback handling - no longer needed\n"],"names":["ipcRenderer","contextBridge"],"mappings":"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"}